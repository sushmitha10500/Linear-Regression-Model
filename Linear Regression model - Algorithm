# Algorithm To create a model using Python's scikit-learn library to predict student scores
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

df=pd.read_csv(r"C:\Users\NEELAM SUSHMITHA\OneDrive\Desktop\student_scores,csv")
X = df[['Hours_Studied']]  # Features (Independent variable)
y = df['Scores']           # Target (Dependent variable)

df.head(20)
df.shape

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)

# Print results
print("Mean Squared Error (MSE):", mse)
print("Model Coefficients:", model.coef_)    #m()
print("Model Intercept:", model.intercept_)  #b(intercept)

# Example: Predicting a new score
new_hours = np.array([[3.7]])  # Hours studied
predicted_score = model.predict(new_hours)
print(f"Predicted Score for {new_hours[0][0]} hours studied: {predicted_score[0]}")



